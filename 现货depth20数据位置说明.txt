════════════════════════════════════════════════════════════════════════════════
                    现货 depth20@100ms 数据保存位置说明
════════════════════════════════════════════════════════════════════════════════

数据保存路径：
  /data/shared/hft-trading-data/binance/spot/

════════════════════════════════════════════════════════════════════════════════
                              文件命名规则
════════════════════════════════════════════════════════════════════════════════

文件名格式：{symbol}_{date}.gz

示例：
  btcusdt_20251017.gz  ← BTCUSDT的所有数据流
  ethusdt_20251017.gz  ← ETHUSDT的所有数据流
  solusdt_20251017.gz  ← SOLUSDT的所有数据流

════════════════════════════════════════════════════════════════════════════════
                          每个文件包含的数据流
════════════════════════════════════════════════════════════════════════════════

每个文件内部包含该交易对的所有4种数据流：

1. {symbol}@trade           - 逐笔成交数据
2. {symbol}@bookTicker      - 最佳买卖价
3. {symbol}@depth@100ms     - 全量深度数据（增量更新）
4. {symbol}@depth20@100ms   - 20档深度快照 ← 新增！

例如 btcusdt_20251017.gz 包含：
  • btcusdt@trade
  • btcusdt@bookTicker
  • btcusdt@depth@100ms
  • btcusdt@depth20@100ms

════════════════════════════════════════════════════════════════════════════════
                              数据格式
════════════════════════════════════════════════════════════════════════════════

文件格式：gzip压缩的文本文件
每行格式：{timestamp_ns} {json_data}

示例：
  1760668584303071180 {"stream":"btcusdt@depth20@100ms","data":{...}}

时间戳：纳秒级Unix时间戳
JSON数据：包含stream和data字段

════════════════════════════════════════════════════════════════════════════════
                          depth20@100ms 数据结构
════════════════════════════════════════════════════════════════════════════════

{
  "stream": "btcusdt@depth20@100ms",
  "data": {
    "lastUpdateId": 78443395368,
    "bids": [
      ["106301.81", "2.105"],   // [价格, 数量]
      ["106301.80", "0.003"],
      ...                        // 共20档
    ],
    "asks": [
      ["106301.82", "4.636"],
      ["106301.83", "0.001"],
      ...                        // 共20档
    ]
  }
}

特点：
  • 完整快照（不是增量）
  • 固定20档买盘 + 20档卖盘
  • 每100ms推送一次
  • 无需维护状态，直接使用

════════════════════════════════════════════════════════════════════════════════
                            如何读取数据
════════════════════════════════════════════════════════════════════════════════

方法1：使用 zcat 解压并过滤
  zcat btcusdt_20251017.gz | grep "depth20@100ms" | head -10

方法2：Python读取
  import gzip
  import json
  
  with gzip.open('btcusdt_20251017.gz', 'rt') as f:
      for line in f:
          timestamp, data = line.strip().split(' ', 1)
          parsed = json.loads(data)
          
          if 'depth20@100ms' in parsed.get('stream', ''):
              # 处理depth20数据
              depth_data = parsed['data']
              bids = depth_data['bids']  # 20档买盘
              asks = depth_data['asks']  # 20档卖盘
              print(f"最佳买价: {bids[0][0]}, 最佳卖价: {asks[0][0]}")

方法3：使用测试脚本
  python3 /home/hft/hftbacktest/verify_collector_streams.py

════════════════════════════════════════════════════════════════════════════════
                            数据统计信息
════════════════════════════════════════════════════════════════════════════════

更新频率：
  • depth20@100ms:  10 消息/秒
  • depth@100ms:    10 消息/秒
  • bookTicker:     ~500 消息/秒
  • trade:          ~200 消息/秒

数据量估算（每天）：
  • depth20@100ms: ~864,000 条消息/天
    (10消息/秒 × 86,400秒)

文件大小（参考当前）：
  • btcusdt_20251017.gz: 83M (包含所有4个流)
  • ethusdt_20251017.gz: 94M
  • solusdt_20251017.gz: 56M

════════════════════════════════════════════════════════════════════════════════
                          目录结构（完整）
════════════════════════════════════════════════════════════════════════════════

/data/shared/hft-trading-data/
└── binance/
    ├── futures/              ← 期货数据
    │   ├── btcusdt_20251017.gz
    │   ├── ethusdt_20251017.gz
    │   └── solusdt_20251017.gz
    │
    └── spot/                 ← 现货数据（包含depth20@100ms）
        ├── btcusdt_20251017.gz
        ├── ethusdt_20251017.gz
        └── solusdt_20251017.gz

════════════════════════════════════════════════════════════════════════════════
                          数据收集状态
════════════════════════════════════════════════════════════════════════════════

Collector进程：
  PID: 719892
  命令: ./target/release/collector 
        /data/shared/hft-trading-data/binance/spot 
        binancespot 
        BTCUSDT ETHUSDT SOLUSDT

收集的数据流：
  ✓ trade
  ✓ bookTicker
  ✓ depth@100ms
  ✓ depth20@100ms  ← 从 15:32 开始收集

状态：✅ 运行中

════════════════════════════════════════════════════════════════════════════════
                          注意事项
════════════════════════════════════════════════════════════════════════════════

1. 文件实时写入
   • 当前日期的文件正在被写入
   • 读取时可能遇到gzip格式错误
   • 建议读取前一天的文件（已完成写入）

2. 数据混合存储
   • 所有4种数据流混合在一个文件中
   • 需要通过 "stream" 字段过滤
   • 按时间戳顺序排列

3. 时区说明
   • 文件名使用UTC时间
   • 时间戳是Unix纳秒时间戳
   • 需要根据需要转换为本地时间

4. 数据完整性
   • depth20@100ms 从 2025-10-17 15:32 开始有数据
   • 之前的文件不包含此数据流
   • 使用前请检查文件创建时间

════════════════════════════════════════════════════════════════════════════════
                          验证命令
════════════════════════════════════════════════════════════════════════════════

# 查看当前收集的文件
ls -lh /data/shared/hft-trading-data/binance/spot/

# 检查collector进程
ps aux | grep collector

# 查看文件中的数据流类型（需要等文件不被写入时）
zcat /data/shared/hft-trading-data/binance/spot/btcusdt_20251017.gz | \
  grep -o '"stream":"[^"]*"' | sort | uniq -c

# 查看depth20数据示例（使用前一天的文件）
zcat /data/shared/hft-trading-data/binance/spot/btcusdt_20251017.gz | \
  grep "depth20@100ms" | head -5

# 实时验证collector是否在收集
python3 /home/hft/hftbacktest/verify_collector_streams.py

════════════════════════════════════════════════════════════════════════════════
                          快速参考
════════════════════════════════════════════════════════════════════════════════

数据位置：
  /data/shared/hft-trading-data/binance/spot/{symbol}_{date}.gz

包含数据流：
  • trade
  • bookTicker
  • depth@100ms
  • depth20@100ms  ← 新增（从2025-10-17 15:32开始）

文件格式：
  gzip压缩文本，每行：{timestamp_ns} {json}

读取方式：
  使用gzip库读取，通过stream字段过滤

════════════════════════════════════════════════════════════════════════════════

最后更新：2025-10-17 15:38
状态：✅ 正在收集中

════════════════════════════════════════════════════════════════════════════════

